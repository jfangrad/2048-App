package lab4_205_07.uwaterloo.ca.lab4_205_07;

import android.app.Activity;
import android.content.Context;
import android.graphics.Point;
import android.support.annotation.Nullable;
import android.util.Log;
import android.widget.RelativeLayout;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Random;
import java.util.TimerTask;
import lab4_205_07.uwaterloo.ca.lab4_205_07.FSM.State;
import static lab4_205_07.uwaterloo.ca.lab4_205_07.FSM.State.*;

//Fix random generation
//Fix movement in case like: [2] [4] [4] [4] should become [ ] [2] [4] [8]


public class GameLoopTask extends TimerTask {

    private Activity myActivity;
    private Context context;
    private RelativeLayout rl;
    private State current = resting;
    private State prev = resting;
    private boolean newBlockMade = false;

    //Square coordinates lookup table
    protected static Point[] squareCoordinateLookUp = {new Point((int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_OFFSET), new Point((int)GameBlock.SQUARE_SIZE+(int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_OFFSET), new Point((int)GameBlock.SQUARE_SIZE*2+(int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_OFFSET), new Point((int)GameBlock.SQUARE_SIZE*3+(int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_OFFSET),
            new Point((int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_SIZE+(int)GameBlock.SQUARE_OFFSET), new Point((int)GameBlock.SQUARE_SIZE+(int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_SIZE+(int)GameBlock.SQUARE_OFFSET), new Point((int)GameBlock.SQUARE_SIZE*2+(int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_SIZE+(int)GameBlock.SQUARE_OFFSET),new Point((int)GameBlock.SQUARE_SIZE*3+(int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_SIZE+(int)GameBlock.SQUARE_OFFSET),
            new Point((int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_SIZE*2+(int)GameBlock.SQUARE_OFFSET), new Point((int)GameBlock.SQUARE_SIZE+(int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_SIZE*2+(int)GameBlock.SQUARE_OFFSET), new Point((int)GameBlock.SQUARE_SIZE*2+(int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_SIZE*2+(int)GameBlock.SQUARE_OFFSET), new Point((int)GameBlock.SQUARE_SIZE*3+(int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_SIZE*2+(int)GameBlock.SQUARE_OFFSET),
            new Point((int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_SIZE*3+(int)GameBlock.SQUARE_OFFSET), new Point((int)GameBlock.SQUARE_SIZE+(int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_SIZE*3+(int)GameBlock.SQUARE_OFFSET), new Point((int)GameBlock.SQUARE_SIZE*2+(int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_SIZE*3+(int)GameBlock.SQUARE_OFFSET), new Point((int)GameBlock.SQUARE_SIZE*3+(int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_SIZE*3+(int)GameBlock.SQUARE_OFFSET)};

    protected static LinkedList<GameBlock> blocks = new LinkedList<>();

    GameLoopTask(Activity myActivity, RelativeLayout rl, Context context){
        this.myActivity = myActivity;
        this.rl = rl;
        this.context = context;
        //blocks.add(createBlock((int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_OFFSET,1,2));
    }

    @Override
    public void run() {

        myActivity.runOnUiThread(new Runnable() {
            @Override
            public void run() {

                for (GameBlock block:blocks) {
                    block.move(); //Update the block

                    if(block.myValue == 256){
                        Log.wtf("Winner", "Winner");
                    }
                }

            }
        });

    }

    //Function creates a new GameBlock object and returns its reference
    private GameBlock createBlock(int x, int y, int currentSquare, int valueOfBlock){
        //Log.i("new Block position: " , currentSquare+ "");
        GameBlock gameBlock = new GameBlock(context, rl, x, y, currentSquare, 0.9f);
        gameBlock.myValue = valueOfBlock;
        rl.addView(gameBlock);
        return gameBlock;
    }

    private GameBlock generateRandom(){
        boolean done = false;
        int randNum=0;
        Random rand = new Random();
        int blockValue;
        while(!done){
            randNum = rand.nextInt(16);

            if(isOccupied(squareCoordinateLookUp[randNum].x,squareCoordinateLookUp[randNum].y) == null){
                done = true;
            }
        }

        blockValue = rand.nextInt(10);
        if(blockValue == 3 || blockValue == 7)
            blockValue = 4;
        else
            blockValue = 2;

        return createBlock(squareCoordinateLookUp[randNum].x,squareCoordinateLookUp[randNum].y, randNum+1, blockValue);
    }

    //Function sets the games direction
    public void setDirection(State direction){
        prev = current;
        current = direction;

        //Check if all blocks are done moving
        boolean movementDone = true;
        for(GameBlock block: blocks){
            if(!block.isDoneMoving())
                movementDone = false;
        }

        //Generates New random GameBlock and deletes any blocks that need to be deleted
        if(movementDone && current == resting && !newBlockMade) {//Move has been made and all blocks have updated (Waiting for next move)

            //Add new Block to Screen
            blocks.add(generateRandom());
            newBlockMade = true;

            //Go through and delete any blocks that have delete flag and double any that have double flag
            Iterator<GameBlock> iterator = blocks.iterator();
            while(iterator.hasNext()){
                GameBlock block = iterator.next();
                if(block.toDouble){
                    block.doubleValue();
                }
                if(block.toDelete){
                    block.delete(rl);
                    iterator.remove();
                }
            }
        }

        //Sets direction
        if(movementDone && current != resting && current != undefined && newBlockMade){//Blocks are not moving, new block has been made, and state says to move
            for (GameBlock block: blocks) {
                block.setDirection(current);
            }
            newBlockMade = false;
        }
    }


    @Nullable
    public static GameBlock isOccupied(int x, int y){
        //int buffer = 20;

        for(GameBlock block:blocks){
            if(block.getCoord()[0] == x && block.getCoord()[1] == y)
                return block;
        }

        return null;
    }
}
