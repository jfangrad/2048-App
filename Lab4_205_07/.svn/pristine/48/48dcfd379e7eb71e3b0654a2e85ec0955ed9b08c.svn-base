package lab4_205_07.uwaterloo.ca.lab4_205_07;

import android.app.Activity;
import android.content.Context;
import android.graphics.Point;
import android.util.Log;
import android.widget.RelativeLayout;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Random;
import java.util.TimerTask;
import lab4_205_07.uwaterloo.ca.lab4_205_07.FSM.State;
import static lab4_205_07.uwaterloo.ca.lab4_205_07.FSM.State.*;


public class GameLoopTask extends TimerTask {

    private Activity myActivity;
    private Context context;
    private RelativeLayout rl;
    private State current = resting;
    private State prev = resting;
    private boolean newBlockMade = false;

    //Square coordinates lookup table
    protected static Point[] squareCoordinateLookUp = {new Point((int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_OFFSET), new Point((int)GameBlock.SQUARE_SIZE+(int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_OFFSET), new Point((int)GameBlock.SQUARE_SIZE*2+(int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_OFFSET), new Point((int)GameBlock.SQUARE_SIZE*3+(int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_OFFSET),
            new Point((int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_SIZE+(int)GameBlock.SQUARE_OFFSET), new Point((int)GameBlock.SQUARE_SIZE+(int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_SIZE+(int)GameBlock.SQUARE_OFFSET), new Point((int)GameBlock.SQUARE_SIZE*2+(int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_SIZE+(int)GameBlock.SQUARE_OFFSET),new Point((int)GameBlock.SQUARE_SIZE*3+(int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_SIZE+(int)GameBlock.SQUARE_OFFSET),
            new Point((int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_SIZE*2+(int)GameBlock.SQUARE_OFFSET), new Point((int)GameBlock.SQUARE_SIZE+(int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_SIZE*2+(int)GameBlock.SQUARE_OFFSET), new Point((int)GameBlock.SQUARE_SIZE*2+(int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_SIZE*2+(int)GameBlock.SQUARE_OFFSET), new Point((int)GameBlock.SQUARE_SIZE*3+(int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_SIZE*2+(int)GameBlock.SQUARE_OFFSET),
            new Point((int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_SIZE*3+(int)GameBlock.SQUARE_OFFSET), new Point((int)GameBlock.SQUARE_SIZE+(int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_SIZE*3+(int)GameBlock.SQUARE_OFFSET), new Point((int)GameBlock.SQUARE_SIZE*2+(int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_SIZE*3+(int)GameBlock.SQUARE_OFFSET), new Point((int)GameBlock.SQUARE_SIZE*3+(int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_SIZE*3+(int)GameBlock.SQUARE_OFFSET)};

    protected LinkedList<GameBlock> blocks = new LinkedList<>();

    GameLoopTask(Activity myActivity, RelativeLayout rl, Context context){
        this.myActivity = myActivity;
        this.rl = rl;
        this.context = context;
        blocks.add(createBlock((int)GameBlock.SQUARE_OFFSET,(int)GameBlock.SQUARE_OFFSET,1));
    }

    @Override
    public void run() {

        myActivity.runOnUiThread(new Runnable() {
            @Override
            public void run() {

                for (GameBlock block:blocks) {
                    block.move(); //Update the block
                }

            }
        });

    }

    //Function creates a new GameBlock object and returns its reference
    private GameBlock createBlock(int x, int y, int currentSquare){
        Log.i("new Block position: " , currentSquare+ "");
        GameBlock gameBlock = new GameBlock(context, rl, x, y, currentSquare, 0.9f);
        rl.addView(gameBlock);
        return gameBlock;
    }

    private GameBlock generateRandom(){
        ArrayList<Integer> openSpaces = new ArrayList();

        for(int i = 0; i < 15; i++) {
            boolean positionOccupied = false;
            for (GameBlock block : blocks) {
                if(block.currentSquare == i+1){
                    positionOccupied = true;
                    break;
                }
            }
            if(!positionOccupied)
                openSpaces.add(i+1);
        }

        Random rand = new Random();
        int randNum = rand.nextInt(openSpaces.size());

        return createBlock(squareCoordinateLookUp[openSpaces.get(randNum)].x, squareCoordinateLookUp[openSpaces.get(randNum)].y, openSpaces.get(randNum));
    }

    //Function sets the games direction
    public void setDirection(State direction){
        prev = current;
        current = direction;

        //Check if all blocks are done moving
        boolean movementDone = true;
        for(GameBlock block: blocks){
            if(!block.isDoneMoving())
                movementDone = false;
        }

        if(movementDone && current == resting && !newBlockMade) {//Move has been made and all blocks have updated (Waiting for next move)
            //Add new Block to Screen
            blocks.add(generateRandom());
            newBlockMade = true;

            //Remove blocks that are in the same square
            /*for(GameBlock block1: blocks){
                int count =0;
                for(GameBlock block2: blocks){
                    if(block1.currentSquare == block2.currentSquare && block1 != block2){
                        rl.removeView(blocks.get(count).tv);
                        rl.removeView(blocks.get(count));
                        blocks.remove(count);
                    }
                    count++;
                }
            }*/

        }

        if(movementDone && current != resting && current != undefined){//Blocks have finished moving but user has not finished moving
            for (GameBlock block: blocks) {
                block.setDirection(current);
            }
            newBlockMade = false;
        }
    }
}
